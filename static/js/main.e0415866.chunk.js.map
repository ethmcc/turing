{"version":3,"sources":["components/compiler/compiler.js","components/navbar/navbar.jsx","components/turing_machine/turing_machine.js","components/turing_viz/turing_viz.jsx","components/example/example.jsx","components/examples_container/examples_container.jsx","components/explanation/explanation.jsx","App.js","serviceWorker.js","index.js"],"names":["exports","compiler","sourceCode","state","character","source","char","lengthOfInString","length","startOfInStringPos","indexOf","endOfInStringPos","endLinePos","nextInstructionArray","slice","split","nextState","printChar","nextMove","parserDiagram","getInitialConfig","startOfStateString","endOfStateString","startOfInputString","lastIndexOf","endOfInputString","startState","startInput","NavBar","className","href","Component","TuringMachine","diagram","tapeContents","this","left","head","right","Object","defineProperties","prototype","nextInstruction","get","isHalted","step","instruction","String","toString","dumpConfig","halted","TuringViz","Fragment","props","machineState","id","disabled","onClick","takeStep","setMachineFromCode","rows","value","onChange","event","setLastChanger","setSourceCode","target","React","Example","title","Boolean","lastChanger","ExamplesContainer","examples","key","map","example","Explanation","App","initialSourceCode","machine","bind","changer","setState","inputSourceCode","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e0415866.chunk.js","sourcesContent":["/* Parser and compiler:\n\nExtremely basic string-slicing based parser/interpreter for Turing\nmachines.\n\nSource code must be formatted as follows:\n    `$startState;\n    $startTapeContents;\n    in state1 char1 out state2 char2 move1;\n    in state3 char3 out state4 char4 move2;\n    in state5 char5 out state6 char6 move3;\n    ...`\nnewlines are not necessary, but each line ends \nwith a semicolon.\n\nline syntax is as follows:\n    in [inputState] [inputCharacter] out [outputState] [outputCharacter] [outputMoveCommand];\n[inputState] [inputCharacter] [outputState] [outputCharacter] \n    can be any strings except reserved keywords. \n[outputMoveCommand] must be either 'left' or 'right'\n*/\n\nfunction parserDiagram(source, state, character) {\n  /** Reads source code, state and character\n   * and returns the next instruction */\n  var char = character;\n  if (char === \"\") {\n    char = \"_\";\n  }\n  const lengthOfInString = (\"in \" + state + \" \" + char + \" out \").length;\n  const startOfInStringPos = source.indexOf(\"in \" + state + \" \" + char);\n  if (startOfInStringPos === -1) {\n    return null;\n  }\n  const endOfInStringPos = startOfInStringPos + lengthOfInString;\n  const endLinePos = source.indexOf(\";\", startOfInStringPos);\n  const nextInstructionString = source.slice(endOfInStringPos, endLinePos);\n  const nextInstructionArray = nextInstructionString.split(\" \");\n  return {\n    nextState: nextInstructionArray[0],\n    printChar: nextInstructionArray[1],\n    nextMove: nextInstructionArray[2],\n  };\n}\n\nfunction compiler(sourceCode) {\n  /* Compiles source code into a function that can be\n   * passed to the TuringMachine constructor as a diagram */\n  return function compiledDiagram(state, character) {\n    return parserDiagram(sourceCode, state, character);\n  };\n}\n\nfunction getInitialConfig(sourceCode) {\n  /* Determines the initial state and tape contents specified\n   * in a source code string */\n  const startOfStateString = sourceCode.indexOf(\"$\");\n  const endOfStateString = sourceCode.indexOf(\";\", startOfStateString);\n  const startOfInputString = sourceCode.lastIndexOf(\"$\");\n  const endOfInputString = sourceCode.indexOf(\";\", startOfInputString);\n  const stateString = sourceCode.slice(\n    startOfStateString + 1,\n    endOfStateString\n  );\n  const inputString = sourceCode.slice(\n    startOfInputString + 1,\n    endOfInputString\n  );\n  return {\n    startState: stateString,\n    startInput: inputString,\n  };\n}\n\nexports.compiler = compiler;\nexports.getInitialConfig = getInitialConfig;\n","import React, { Component } from \"react\";\nimport \"./navbar.css\";\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light bg-light machine-state\">\n        <a className=\"navbar-brand\" href=\".\">\n          Turing Machine Simulator\n        </a>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","/* TODO: I realize now it would be better to handle the tape as \n\tanother object, implemented with two stacks, to avoid \n\tall the string slicing. */\n\n/* TODO: should have a better way to handle blank cells\n */\n\nclass TuringMachine {\n  /** A Turing machine consists of a diagram, state,\n   *   and tape contents (currently strings) divided into:\n   *   contents of the tape left of the head\n   *   contents of the cell of tape directly below the head\n   *   contents of the tape right of the head\n   * The transition diagram (currently, a function), given only\n   *   a character and a state, returns:\n   *   a character to print\n   *   a move instruction (left, right)\n   *   a new state to transition into\n   */\n  constructor(diagram, startState, tapeContents) {\n    this.diagram = diagram;\n    this.state = startState;\n    this.left = \"\";\n    this.head = tapeContents.slice(0, 1);\n    this.right = tapeContents.slice(1);\n  }\n}\n\nObject.defineProperties(TuringMachine.prototype, {\n  /** The next instruction is a property of the machine in a\n   * given configuration, determined by the current character\n   * written by the head, and the current state.\n   * By convention, a machine is halted if the next instruction\n   * is null.\n   */\n  nextInstruction: {\n    get: function () {\n      return this.diagram(this.state, this.head);\n    },\n  },\n  isHalted: {\n    get: function () {\n      return this.nextInstruction == null;\n    },\n  },\n});\n\nTuringMachine.prototype.step = function () {\n  /** Mutates the state of a machine by one\n   * step of evolution according to the\n   * transition diagram */\n  let instruction = this.nextInstruction;\n  if (instruction == null || this.isHalted) {\n    return false;\n  } else {\n    this.state = instruction.nextState;\n    switch (instruction.nextMove) {\n      case \"left\":\n        this.right = String(instruction.printChar) + this.right;\n        this.head = this.left.slice(-1);\n        this.left = this.left.slice(0, -1);\n        break;\n      case \"right\":\n        this.left = this.left + String(instruction.printChar);\n        this.head = this.right.slice(0, 1);\n        this.right = this.right.slice(1);\n        break;\n      default:\n        return false;\n    }\n    return true;\n  }\n};\n\nTuringMachine.prototype.toString = function () {\n  return `State: {${String(this.state)}} \n   >>${String(this.left)}[${String(this.head)}]${String(this.right)}<< \n   Is halted?: {${String(this.isHalted)}}`;\n};\n\nTuringMachine.prototype.dumpConfig = function () {\n  return {\n    diagram: this.diagram,\n    state: this.state,\n    left: this.left,\n    head: this.head,\n    right: this.right,\n    halted: this.isHalted,\n  };\n};\n\nexport default TuringMachine;\n","/* TODO: Currently, this module contains both the visualization component, \nwhich now renders a visual of the tape, tape contents, head, and \nstate, and the source-code editing component, which allows the \nuser to edit the source code fed to the Turing machine.\n\nThis module should be refactored into at least two components:\n  1. turing_viz\n  2. code_editor\n*/\n\nimport React from \"react\";\nimport \"./turing_viz.css\";\n\nclass TuringViz extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"border border-secondary rounded machine-state\">\n          <h3>\n            <span className=\"badge m-2\">State:</span>\n          </h3>\n          <center>\n            <h4>\n              <span className=\"badge border border-secondary badge-light\">\n                {this.props.machineState.state}\n              </span>\n            </h4>\n          </center>\n          <h3>\n            <span className=\"badge m-2\">Tape:</span>\n            <div className=\"tape border boder-dark rounded bg-light m-2\">\n              <div className=\"flex-row\">\n                <div className=\"text-right\">{this.props.machineState.left}</div>\n                <span>\n                  <b>^{this.props.machineState.head}</b>\n                </span>\n                <div>{this.props.machineState.right}</div>\n              </div>\n            </div>\n          </h3>\n        </div>\n        <button\n          id=\"stepButton\"\n          className=\"btn btn-primary m-2 disable-dbl-tap-zoom\"\n          disabled={this.props.machineState.halted}\n          onClick={() => this.props.takeStep()}\n        >\n          Step\n        </button>\n        <button\n          id=\"resetButton disable-dbl-tap-zoom\"\n          className=\"btn btn-secondary m-2\"\n          onClick={() => this.props.setMachineFromCode()}\n        >\n          Reset\n        </button>\n        <h3>\n          <span className=\"badge m-2 machine-state\">Code:</span>\n        </h3>\n        <div className=\"machine-state rounded\">\n          <textarea\n            className=\"form-control bg-light\"\n            rows={8}\n            value={this.props.sourceCode}\n            onChange={(event) => {\n              this.props.setLastChanger(null);\n              this.props.setSourceCode(event.target.value);\n            }}\n          ></textarea>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default TuringViz;\n","import React from \"react\";\n\nconst Example = (props) => {\n  return (\n    <details>\n      <summary className=\"btn btn-light m-2\">{String(props.title)}</summary>\n      <div className=\"border border-secondary rounded bg-light m-2\">\n        <pre className=\"pre-scrollable\">\n          <code>{String(props.sourceCode)}</code>\n        </pre>\n      </div>\n      <center>\n        <button\n          disabled={Boolean(props.lastChanger === props.id)}\n          className=\"btn btn-primary m-2\"\n          onClick={() => {\n            props.setLastChanger(props.id);\n            props.setSourceCode(String(props.sourceCode));\n          }}\n        >\n          Paste Into Code Field\n        </button>\n      </center>\n    </details>\n  );\n};\n\nexport default Example;\n","/* TODO: I want buttons for each of the source code examples, that \ninteract with the source code panel (currently in the turing_viz\ncomponent but should be moved later) and copy-past the example's \nsource code into the source code panel.\n\n*/\n\nimport React from \"react\";\nimport Example from \"../example/example\";\n\nclass ExamplesContainer extends React.Component {\n  state = {\n    examples: [\n      {\n        key: 1,\n        id: 1,\n        title: \"3-state busy beaver\",\n        sourceCode: ` \\\\* When given blank input, prints six \n1's onto the tape and halts. It's\nimpossible for any 3-state machine \nto print a longer string of 1's \nwithout running forever. *\\\\\n$A;\n$;\nin A _ out B 1 right;\nin A 1 out C 1 left;\nin B _ out A 1 left;\nin B 1 out B 1 right;\nin C _ out B 1 left;\nin C 1 out halt 1 right;`,\n      },\n\n      {\n        key: 2,\n        id: 2,\n        title: \"Binary increment\",\n        sourceCode: `$right;\n$110100111; \nin right 0 out right 0 right;\nin right 1 out right 1 right;\nin right _ out carry _ left;\nin carry 0 out done 1 left;\nin carry 1 out carry 0 left;\nin carry _ out halt 1 left;`,\n      },\n\n      {\n        key: 3,\n        id: 3,\n        title: \"Palindrome checker\",\n        sourceCode: `\\\\* Accepts when a string of a's and b's is a palindrome *\\\\\n$start; \n$abababa;\nin start a out memoryA _ right; \nin start b out memoryB _ right; \nin start _ out accept _ right; \n\nin memoryA a out memoryA a right; \nin memoryA b out memoryA b right; \nin memoryA _ out matchA _ left; \n\nin memoryB a out memoryB a right; \nin memoryB b out memoryB b right; \nin memoryB _ out matchB _ left; \n\nin matchA a out back _ left; \nin matchA b out reject b right; \nin matchA _ out accept _ right; \n\nin matchB a out reject a right; \nin matchB b out back _ left; \nin matchB _ out accept _ right; \n\nin back a out back a left; \nin back b out back b left; \nin back _ out start _ right;`,\n      },\n    ],\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <h3>\n          <span className=\"badge m-2\">More examples:</span>\n        </h3>\n        <p className=\"m-2\">\n          Try some of these example programs, or edit your own in the Code box\n          above!\n        </p>\n\n        {this.state.examples.map((example) => (\n          <React.Fragment>\n            <span>\n              <Example\n                key={example.id}\n                id={example.id}\n                sourceCode={example.sourceCode}\n                title={example.title}\n                setSourceCode={this.props.setSourceCode}\n                setLastChanger={this.props.setLastChanger}\n                lastChanger={this.props.lastChanger}\n              />\n            </span>\n          </React.Fragment>\n        ))}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ExamplesContainer;\n","import React from \"react\";\n\nconst Explanation = () => {\n  return (\n    <React.Fragment>\n      <div>\n        <h3>\n          <span className=\"badge m-2\">Explanation:</span>\n        </h3>\n        <details>\n          <summary className=\"btn btn-light m-2\">\n            What is a Turing machine?\n          </summary>\n          <div className=\"card card-body m-2\">\n            <p>\n              [Adapted from Wikipedia] A Turing machine is a mathematical model\n              of computation that defines an abstract machine which manipulates\n              symbols on a strip of tape according to a pre-specified table of\n              rules. Despite the model's simplicity, given any computer\n              algorithm, a Turing machine capable of simulating that algorithm's\n              logic can be constructed.\n            </p>\n            <p>\n              A Turing machine operates similarly to a finite-state automata,\n              but is provided with a memory tape divided into cells. It\n              positions its \"head\" over a cell and reads the symbol there. Then,\n              determined solely by the symbol read, together with the machine's\n              own present state, the machine writes a symbol in the cell, then\n              either moves the tape head one cell left or right and transitions\n              to another of finitely many states, according to a user-specified\n              table of instructions.\n            </p>\n          </div>\n        </details>\n        <details>\n          <summary className=\"btn btn-light m-2\">\n            What is the syntax for the code?\n          </summary>\n          <div className=\"card card-body m-2\">\n            <p>The format for the source code used above is as follows:</p>\n            <p>\n              The first two lines contain a header specifying what state to\n              begin in and what contents to write to the tape initially:\n            </p>\n            <pre className=\"border border-secondary rounded bg-light\">\n              <code>\n                $[initialState];\n                <br />\n                $[initialTapeContents];\n                <br />\n              </code>\n            </pre>\n            <p>\n              The header is followed by as many lines as you like of\n              instructions, each with the following syntax, and terminated by a\n              semicolon:\n            </p>\n            <pre className=\"border border-secondary rounded bg-light\">\n              <code>\n                in [startingState] [readCharacter] out [newState] [newCharacter]\n                [move];\n              </code>\n            </pre>\n            <p>There are a few other things you should be aware of:</p>\n            <ul>\n              <li>The move command must be one of either `left` or `right`.</li>\n              <li>The symbol `_` denotes a blank character. </li>\n              <li>\n                The symbols `$` and `;` are reserved by the compiler (I also\n                don't recommend using `^` as a character).\n              </li>\n              <li>The strings `in` and `out` are reserved keywords.</li>\n            </ul>\n            Other than that the state names can be any ASCII string, and the\n            characters can be any ASCII character. Bitmoji not yet supported,\n            sorry!\n          </div>\n        </details>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Explanation;\n","import React from \"react\";\nimport NavBar from \"./components/navbar/navbar\";\nimport { compiler, getInitialConfig } from \"./components/compiler/compiler\";\nimport TuringMachine from \"./components/turing_machine/turing_machine\";\nimport TuringViz from \"./components/turing_viz/turing_viz\";\nimport ExamplesContainer from \"./components/examples_container/examples_container\";\nimport Explanation from \"./components/explanation/explanation\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.initialSourceCode = `\\\\* Adds 1 to a binary number *\\\\ \\n$right; \\n$11011; \\\\\\\\ 27 + 1 = 28 = (11100)_2 \\nin right 0 out right 0 right; \\nin right 1 out right 1 right; \\nin right _ out carry _ left; \\nin carry 0 out halt 1 left; \\nin carry 1 out carry 0 left; \\nin carry _ out halt 1 left;`;\n    this.machine = new TuringMachine(\n      compiler(this.initialSourceCode),\n      getInitialConfig(this.initialSourceCode).startState,\n      getInitialConfig(this.initialSourceCode).startInput\n    );\n    this.setLastChanger = this.setLastChanger.bind(this);\n    this.setSourceCode = this.setSourceCode.bind(this);\n    this.setMachineFromCode = this.setMachineFromCode.bind(this);\n    this.takeStep = this.takeStep.bind(this);\n    this.state = {\n      lastChanger: null,\n      sourceCode: this.initialSourceCode,\n      machineState: this.machine.dumpConfig(),\n    };\n  }\n\n  setLastChanger(changer) {\n    this.setState({ lastChanger: changer });\n  }\n\n  setSourceCode(inputSourceCode) {\n    this.setState({ sourceCode: inputSourceCode }, this.setMachineFromCode);\n  }\n\n  setMachineFromCode() {\n    this.machine = new TuringMachine(\n      compiler(this.state.sourceCode),\n      getInitialConfig(this.state.sourceCode).startState,\n      getInitialConfig(this.state.sourceCode).startInput\n    );\n    const machineState = this.machine.dumpConfig();\n    this.setState({ machineState: machineState });\n  }\n\n  takeStep() {\n    this.machine.step();\n    const machineState = this.machine.dumpConfig();\n    this.setState({ machineState: machineState });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar />\n        <br />\n        <div className=\"Site-content disable-dbl-tap-zoom\">\n          <main className=\"u-container\">\n            <TuringViz\n              lastChanger={this.state.lastChanger}\n              setLastChanger={this.setLastChanger}\n              sourceCode={this.state.sourceCode}\n              setSourceCode={this.setSourceCode}\n              machineState={this.state.machineState}\n              setMachineFromCode={this.setMachineFromCode}\n              takeStep={this.takeStep}\n            />\n            <Explanation />\n            <br />\n            <ExamplesContainer\n              lastChanger={this.state.lastChanger}\n              setLastChanger={this.setLastChanger}\n              setSourceCode={this.setSourceCode}\n            />\n          </main>\n        </div>\n        <footer className=\"footer\">\n          <div className=\"container\">\n            <br />\n          </div>\n        </footer>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}